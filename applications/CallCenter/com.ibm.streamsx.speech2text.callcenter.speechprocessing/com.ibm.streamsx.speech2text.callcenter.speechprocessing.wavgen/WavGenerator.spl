namespace com.ibm.streamsx.speech2text.callcenter.speechprocessing.wavgen ;

composite WavGenerator
{
	param
		expression<rstring> $FFMPEG_LOC : getSubmissionTimeValue("ffmpegLocation") ;
		expression<rstring> $BIN_LOC : getSubmissionTimeValue("writeBINLocation") ;
		expression<rstring> $WAV_LOC : getSubmissionTimeValue("writeWAVLocation") ;
		expression<rstring> $DELETE_BIN : getSubmissionTimeValue("deleteBINFile",
			"TRUE") ;

			// SpeechFileSink
		expression<rstring> $writeToDirectory :
			getSubmissionTimeValue("writeToDirectory") ;
		expression<rstring> $moveToDirectory :
			getSubmissionTimeValue("moveToDirectory") ;
		expression<int32> $callTimeout :(int32) getSubmissionTimeValue("callTimeout",
			"30") ;
		expression<float64> $scheduledActionPeriod :(float64)
			getSubmissionTimeValue("scheduledActionPeriod", "1.0") ;
    	expression<int32> $parallelWidth :(int32) getSubmissionTimeValue("parallel", "1");

	type
		payload = tuple<rstring id, rstring channel_id,  uint32 ssrc, uint32 ts, uint32 captureSeconds, uint16 seq,  int32 samples, blob speech> ;  

	graph

		stream<payload> Payload = Import()
		{
			param
				subscription : topic == "Payload" ; 
		}
	
		() as SpeechSink = SpeechFileSink(Payload) {
		  param
		    writeToDirectory: $writeToDirectory;
		    moveToDirectory: $moveToDirectory;
		    callTimeout: $callTimeout;
		    scheduledActionPeriod: $scheduledActionPeriod;
		  config
		    placement: partitionIsolation;
		    threadedPort: queue(Payload, Sys.Wait, 1000000);
		}
	
		stream<rstring filename> PayloadFile = DirectoryScan()
		{
			param
				directory : $moveToDirectory ;
		}

		@parallel(width = $parallelWidth)
		stream<rstring filename> BinaryFile = BinaryOuput(PayloadFile)
		{
			param
				FFMPEG_LOC : $FFMPEG_LOC;
				BIN_LOC    : $BIN_LOC;
				WAV_LOC    : $WAV_LOC;
				DELETE_BIN : $DELETE_BIN;
		}

}

