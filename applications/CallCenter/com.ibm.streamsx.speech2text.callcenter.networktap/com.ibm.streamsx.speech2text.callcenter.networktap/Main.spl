/*
** Copyright (C) 2011, 2016  International Business Machines Corporation
** All Rights Reserved
*/

namespace com.ibm.streamsx.speech2text.callcenter.networktap;

use com.ibm.streamsx.network.mac::*;
use com.ibm.streamsx.network.ipv4::*;
use com.ibm.streamsx.network.ipv6::*;
use com.ibm.streamsx.network.source::*;
use com.ibm.streamsx.speech2text.callcenter.types::*;

composite Main {

    param
    expression<rstring> $networkInterface: getSubmissionTimeValue("networkInterface");
    expression<float64> $metricsInterval: (float64)getSubmissionTimeValue("metricsInterval", "1.0" );
    expression<float64> $timeoutInterval: (float64)getSubmissionTimeValue("timeoutInterval", "120.0" );
    expression<rstring> $outfile: getSubmissionTimeValue("outfile"); 
       expression<rstring> $connHost    : getSubmissionTimeValue("connHost");
       expression<uint32> $connPort     : (uint32) getSubmissionTimeValue("connPort");
    graph

	    stream<PacketType> PacketStream as Out = PacketLiveSource() {
	        logic state: { map<uint8,rstring> ipProtocols = { 1: "icmp", 6: "tcp", 17: "udp" }; }
	        param
	            promiscuous : true;
	            networkInterface: $networkInterface;
	            metricsInterval: $metricsInterval;
	        output Out:
	            packetsReceived = packetsReceived(),
	            packetsDropped = packetsDropped(),
	            packetsProcessed = packetsProcessed(), 
	            ipSrcAddr = convertIPV4AddressNumericToString(IPV4_SRC_ADDRESS()),
	            captureSeconds= CAPTURE_SECONDS() , 
	            IP_PROTOCOL = IP_PROTOCOL(),
	            IP_DST_PORT = IP_DST_PORT(),
	 //           PACKET_LENGTH = PACKET_LENGTH(),
	            PAYLOAD_LENGTH = PAYLOAD_LENGTH(),
	 //           PACKET_DATA = PACKET_DATA(),
	            PAYLOAD_DATA = PAYLOAD_DATA();
	    } 
	
	
	/*
	     stream<PacketType pkt> Skipme  = Custom(PacketStream)
	     {
	                logic
	                   state  : mutable int32 tupleCount;
	                   onTuple PacketStream :
	                  { 
	                     tupleCount = tupleCount + 1; 
	                  //   if ( tupleCount == 5000 ) 
	                  //   {
	                          submit({ pkt  = PacketStream}, Skipme) ; 
	                          tupleCount = 0; 
	                 //    }
	                  }
	     }
	
	 
	    () as PacketSink = FileSink(Skipme) { param file: $outfile; format: csv;  }     
	*/  
	  
	 
	   () as TcpSink_PacketStream = TCPSink(PacketStream)
	    {
	      param
	        role  : server;
	        port  : $connPort;
	        name  : $connHost;                                                                format : csv;
	        config
	         threadedPort : queue(PacketStream,Sys.Wait, 1000000);
	
	
	    }
	
	
	/*
	
	    () as Timeout = Custom() { logic onProcess: { block($timeoutInterval); shutdownPE(); } } 
	
	*/   
  

}
