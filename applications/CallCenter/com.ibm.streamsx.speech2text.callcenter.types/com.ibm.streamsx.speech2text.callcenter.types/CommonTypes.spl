namespace com.ibm.streamsx.speech2text.callcenter.types;

use com.ibm.streamsx.network.ipv4::* ;
use com.ibm.streamsx.network.ipv6::* ;
use com.ibm.streamsx.network.source::* ;
use com.ibm.streamsx.network.parse::* ;

	
/*
 * Type of Stream exported to the "Data Center" by the DataCenterSink application
 */
type  Utterance	=	
	tuple<rstring callId, 
		int32 utteranceNumber,
		float64 utteranceStartTime,  
        float64 utteranceEndTime,
        uint32 captureSeconds, 
        rstring role,
		rstring utterance,
		int32 speakerId,
        rstring callCenter,
        float64 utteranceConfidence,
        list<float64>  utteranceTokenConfidences/*,
        list<int32> utteranceSpeakers,
		list<rstring> nBestHypotheses*/> ;
								
type PacketType =
        uint64 packetsReceived,             // total number of packet received, as of last metrics interval
        uint64 packetsDropped,              // total number of packet dropped, as of last metrics interval
        uint64 packetsProcessed,            // total number of packets processed by operator, so far 
        rstring ipSrcAddr,
        uint32 captureSeconds, 
        uint8 IP_PROTOCOL,                  // IP protocol: 0x01==1 for ICMP, 0x6==6 for TCP, 0x11==17 for UDP
        uint16 IP_DST_PORT,
        uint32 PAYLOAD_LENGTH,              // length of packet payload, following all network headers
        blob PAYLOAD_DATA;                  // contents of packet payload, following all network headers
        
// Speech payload for generating .wav files
type payload = 
	tuple<rstring id, 
		rstring channel_id,  
		uint32 ssrc, 
		uint32 ts, 
		uint32 captureSeconds, 
		uint16 seq,  
		int32 samples, 
		blob speech> ; 
		
type AudioPacket = 
	rstring id, 
	rstring channel_id, 
	uint32 ssrc, 
	uint32 ts, 
	uint32 captureSeconds,   
	blob speech, 
	int32 samples, 
	int32 jobId, 
	uint32 hostId ; 