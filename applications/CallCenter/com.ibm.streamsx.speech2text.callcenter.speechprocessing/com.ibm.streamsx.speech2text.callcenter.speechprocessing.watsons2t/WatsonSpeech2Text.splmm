/*******************************************************************************
 * Copyright (C) 2016, International Business Machines Corporation
 * All Rights Reserved
 *******************************************************************************/
<% # Switch to Perl scripting mode 

        use integer;
        use Cwd;
        use Env qw(WORKSPACE_ROOT);

        print "// Perl Arguments in effect for mixed-mode processing\n";
        my $argCnt = @ARGV;
        print "// Argument count: ", $argCnt, "\n";
        my $argIdx;
        for ($argIdx = 0; $argIdx < $argCnt; $argIdx++) {
                print "// \$ARGV\[", $argIdx, "\]\:", $ARGV[$argIdx], "\n";
        }
        my $jobNumber = $ENV{'jobNumber'};
        my $jobCount  = $ENV{'jobCount'};
        my $ssystem   = $ENV{'jobHost'};


%>

namespace com.ibm.streamsx.speech2text.callcenter.speechprocessing.watsons2t;  
  
use com.ibm.streams.speech2text.watson::*; 
use com.ibm.streamsx.speech2text.callcenter.types::*;


type bestUtterance = tuple<rstring id, rstring channel_id
	, float64 utteranceStartTime, float64 utteranceEndTime
	,  uint32 captureSeconds,  int32 utteranceNumber
	, rstring utterance, float64 utteranceConfidence
	, list<float64> utteranceTokenConfidences
	, list<int32> utteranceSpeakers
	, list<rstring> nBestHypotheses> ;

type  Utterance_File  = tuple<rstring ipaddress, rstring startingTime
	, rstring callCenter, int32 utteranceNumber
	,  float64 utteranceStartTime, float64 utteranceEndTime
	, uint32 captureSeconds,  rstring role
	, rstring utterance, int32 speakerId>;


composite WatsonSpeech2Text
{    
      param  
        expression<rstring> $paramsetFile   : getSubmissionTimeValue("paramsetFile");
        expression<rstring> $packageFile   : getSubmissionTimeValue("packageFile");
         expression<rstring> $utterances   : getSubmissionTimeValue("utterances");
         expression<rstring> $diagnostics  : getSubmissionTimeValue("diagnostics");

         expression<rstring> $callCenter   : getSubmissionTimeValue("callCenter");
   

	type 

    PacketType2 =
        uint64 packetsReceived,             // total number of packet received, as of last metrics interval
        uint64 packetsDropped,              // total number of packet dropped, as of last metrics interval
        uint64 packetsProcessed,            // total number of packets processed by operator, so far
        rstring ipSrcAddr,
        uint32 captureSeconds,
        uint8 IP_PROTOCOL,                  // IP protocol: 0x01==1 for ICMP, 0x6==6 for TCP, 0x11==17 for UDP
        uint16 IP_DST_PORT,
        uint32 PACKET_LENGTH,               // original length of packet (not necessarily all captured)
        uint32 PAYLOAD_LENGTH,              // length of packet payload, following all network headers
        blob PACKET_DATA,                   // contents of packet captured, including network headers (not necessarily complete)
        blob PAYLOAD_DATA;                  // contents of packet payload, following all network headers


		PacketType = rstring ipSrc_addr ,
                             uint16 dstPort, // destination port 
                             uint8  protocol,
                             uint32 captureSeconds,    

		blob netflowMessage, // the Netflow message from a packet, excluding all network headers
		uint32 payloadLength ; // payload length in bytes 

 
  
		RtpPacket = rstring ipSrc_addr, uint32 ssrc, uint32 ts, uint32 captureSeconds,  uint16 seq, uint32 payloadLength, blob payload ;
		payload = tuple<rstring id, rstring channel_id,  uint32 ssrc, uint32 ts, uint32 captureSeconds,  int32 samples, blob speech> ;  

      graph






// JMS - seperate out into multiple inmport and export jobs.... 


            <% 
                  my $importStream = "Import_Utterances" . $jobNumber;
 
            %> 

             stream<rstring id, rstring channel_id, uint32 ssrc, uint32 ts, uint32 captureSeconds,   blob speech, int32 samples, int32 jobId, uint32 hostId> Imported_Utterances<%=$jobNumber%> = Import() {
              param
                  applicationName : "com.ibm.streamsx.speech2text.callcenter.speechprocessing.packethandler::PacketHandler";
                  streamId : "<%=$importStream%>" ;
           }


             stream<rstring id, rstring channel_id, uint32 ssrc, uint32 ts, uint32 captureSeconds,  blob speech, int32 samples, int32 jobId, uint32 hostId> Imported2_Utterances<%=$jobNumber%> = Functor(Imported_Utterances<%=$jobNumber%>) {
           }


                @parallel(width = <%=$jobCount%>  , partitionBy = [ { port = Imported2_Utterances<%=$jobNumber%>,  attributes = [jobId] } ])
                (
                   stream<bestUtterance> Utterances<%=$jobNumber%>;
                   stream<rstring log> Diagnostics<%=$jobNumber%>
                 ) = SpeechToText(Imported2_Utterances<%=$jobNumber%>)
                {  
                   param 
                            paramsetFile : $paramsetFile;
                            packageFile  : $packageFile; 
                }

/*

                stream<bestUtterance> Filtered_Utterances<%=$jobNumber%>  = Filter(Utterances<%=$jobNumber%>)
                {
                      param filter : ( channel_id == "0" | channel_id == "1" ) ;

                }  

*/ 

 
               (
                stream<Utterance> Utterance_Data<%=$jobNumber%> ;
                stream<Utterance_File> Utterance_File<%=$jobNumber%> )
                  = Custom(Utterances<%=$jobNumber%>)
                { 
                   logic
                       onTuple Utterances<%=$jobNumber%> :
                      { 
                           list<rstring> tokens = tokenize(id,"_",true);
						if (length(channel_id) > 0){
	                         // mutable rstring tempUtterance = utterance;
	                        submit( {callId = $callCenter + "_" + id, utteranceNumber = utteranceNumber, 
	                        	utteranceStartTime = utteranceStartTime, utteranceEndTime = utteranceEndTime, 
	                        	captureSeconds = captureSeconds,  role = "AGENT", utterance = utterance, 
	                        	speakerId = (int32)channel_id, callCenter = $callCenter, 
	                        	utteranceConfidence = utteranceConfidence, utteranceTokenConfidences = utteranceTokenConfidences,
	                        	utteranceSpeakers = utteranceSpeakers, nBestHypotheses = nBestHypotheses }  , Utterance_Data<%=$jobNumber%>  ); 
	                        if (size(tokens) > 1){
		                        submit( {ipaddress = tokens[0],  startingTime = tokens[1], callCenter = $callCenter, utteranceNumber = utteranceNumber, 
		                        	utteranceStartTime = utteranceStartTime, utteranceEndTime = utteranceEndTime, captureSeconds = captureSeconds,  role = "AGENT", utterance = utterance, speakerId = (int32)channel_id }  , Utterance_File<%=$jobNumber%>  );
		                    } 
						} else {
							printStringLn("Channel_id empty: " + (rstring) Utterances<%=$jobNumber%>); 
						}

                      }
                }


               // jmsjms : This export needs to eventually go away and be replaced with a messging system 

		() as ExportFileOutput<%=$jobNumber%> = Export(Utterance_Data<%=$jobNumber%>)
                {
                        param
                      streamId  : "Utterance_Data<%=$jobNumber%>";
                }
             

                () as FileOutput<%=$jobNumber%>  = FileSink(Utterance_File<%=$jobNumber%> )
                {
                        param
                                file: $utterances + "outUtterances<%=$jobNumber%>_{localtime:%m%d%y}_{id}.csv";
                                format : csv ;
                                closeMode : time;
                                timePerFile : 86000.0f;
                                flush : 10u;

                } 
 
		() as FileDiagnostics<%=$jobNumber%>  = FileSink(Diagnostics<%=$jobNumber%> )
                {
                        param 
                               file:   $diagnostics + "Diagnostics<%=$jobNumber%>_{localtime:%m%d%y}_{id}.csv";
                               format : csv ;
                               closeMode : time;
                               timePerFile : 86000.0f;
                               flush : 10u;
                }   


           config
            hostPool : P1=createPool({size=1u, tags=["<%=$ssystem%>"]},Sys.Shared);
            placement  : host(P1);
            restartable : false; 
}  



composite SpeechToText(input inp ; output Utterances, Debug)
{
   param 
 
   expression <rstring> $paramsetFile;
   expression <rstring> $packageFile;

        graph
                (stream<bestUtterance> Utterances; stream<rstring log> Debug) = WatsonS2T(inp)
                {
                        param
                                watsonConfigFile :  $paramsetFile;
				 				watsonModelFile  :  $packageFile;
				                resetOnIdChange : true;  
			           output 
			           		Utterances :     
			           					 utteranceStartTime = getUtteranceStartTime(),  
                                                                         utteranceEndTime   = getUtteranceEndTime(),
			           					 utteranceNumber = getUtteranceNumber(),
			           					 utterance = getUtteranceText(),
			           					 utteranceConfidence = getUtteranceConfidence(),
			           					 utteranceTokenConfidences = getUtteranceWordConfidences(),
			           					 utteranceSpeakers = getUtteranceSpeakers(), 
			           					 nBestHypotheses = getNBestHypotheses();
			           		Debug : 
			           				log = getDiagnosticsMessage(); 
		                config
		                     threadedPort : queue(inp, Sys.DropLast , 10000);
		                     placement : partitionExlocation("WatsonS2T");

                }



}



