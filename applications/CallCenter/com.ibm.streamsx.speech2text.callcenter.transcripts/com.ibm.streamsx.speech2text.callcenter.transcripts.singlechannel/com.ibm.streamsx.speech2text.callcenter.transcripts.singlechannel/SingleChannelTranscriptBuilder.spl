namespace com.ibm.streamsx.speech2text.callcenter.transcripts.singlechannel ;

use com.ibm.streamsx.topology.topic::Subscribe ;
use com.ibm.streamsx.topology.topic::Publish ;
use com.ibm.streamsx.speech2text.callcenter.types::Utterance ;
type Transcript = rstring callId, rstring transcript ;

public composite SingleChannelTranscriptBuilder
{
	param
		expression<boolean> $writeTranscripts : (getSubmissionTimeValue("writeTranscripts", "true") != "false") ;
		expression<rstring> $transcriptDirectory : getSubmissionTimeValue("transcriptDir","");
		expression<int32> $transcriptTimeout : (int32) getSubmissionTimeValue("transcriptTimeout","60");
	graph
		stream<Utterance> SubscribedUtterances = Subscribe()
		{
			param
				topic : "callcenter/speechprocessing/utterances" ;
				streamType : Utterance ;
		}

		stream<Utterance> PeriodicTriggers = Beacon()
		{
			param
				period : 5.0;
			output PeriodicTriggers : callId = "tigger"; 
		}
		
		/*
		 * 
		 * Aggregates the utterances for a call. If we don't receive any utterances
		 * for a given call for $transcriptTimeout seconds, we will flush. 
		 * 
		 */
		stream<rstring callId, list<rstring> utteranceList> UtteranceAggregates =
			Aggregate(SubscribedUtterances,PeriodicTriggers as inputStream)
		{
			window
				inputStream : tumbling, delta(utteranceNumber, 5000), partitioned,
					partitionAge((float64) $transcriptTimeout) ;
			param
				partitionBy : callId ;
				aggregateEvictedPartitions : true ;
			output
				UtteranceAggregates : callId = Any(callId), utteranceList =
					Collect(utterance) ;
		}

		stream<Transcript> FlattenedTranscripts = Custom(UtteranceAggregates as
			inputStream)
		{
			logic
				onTuple inputStream :
				{
					if (callId != "trigger"){
						// Remove quotes 
					 	mutable rstring transcript = regexReplace((rstring) utteranceList,"\\\"","",true); 
					 	// Remove commas
					 	transcript = regexReplacePerl(transcript,"[\\[,\\]]","",true); //"
						printStringLn("Transcript: " + transcript); 
						submit({callId=callId, transcript = transcript}, FlattenedTranscripts);
					}
				}

		}
		
		stream<Transcript> WriteToFileTranscripts = Functor(FlattenedTranscripts)
		{
			param
				filter : $writeTranscripts ;
		}

		() as Printer = FileSink(WriteToFileTranscripts as inPort0Alias)
		{
			param
				file : WriteToFileTranscripts.callId + "_{gmtime:%m%d%y}_{id}.txt";
				suppress : WriteToFileTranscripts.callId; 
				closeMode : dynamic; 
				format : csv; 
		}

		() as TranscriptPublisher = Publish(FlattenedTranscripts)
		{
			param
				topic : "callcenter/transcripts" ;
		}

}

